/*
 * customSelect v1.0.0
 * example for functionality and doc http://wenzhixin.net.cn/p/multiple-select/docs/
 */

"use strict"

;(function(){
	var plugin;

	var defaults = {
		// GENERAL
		className: "custom-select",
		area: "custom-select__area",
		down: "custom-select__down",
		multiple: true
		// CALLBACKS
	};

	$.fn.customSelect = function( options ) {
		if(this.length == 0) return this;

		// support multiple elements
		if( this.length > 1 ) {
			this.each(function() {
				$(this).customSelect( options );
			});

			return this;
		}

		// create a name space to be througth the plugin
		var me = {};
		// set a reference to our select element
		var el = this.get(0),
			$el = this
		;

		/**
		 * ===================================================================================
		 * = PRIVATE FUNCTIONS
		 * ===================================================================================
		 */
		
		/**
		 * Initializes namespace settings to be used throughout plugin
		 */
		
		var _initialize = function() {
			// merge user-supplied options with defaults
			me.settings = $.extend({}, defaults, options);

			//set class for custom select option
			me.settings.optionCls = "custom-select__option";

			// option elements
			me.optionEl = $el.children("option");

			_createCustomSelect();

			// add Events
			me.customSelectEl.on("click", _click);
		};

		/**
		 * Performs all DOM and CSS modifications
		 */
		
		var _createCustomSelect = function() {
			// hide native select
			// el.style.display = "none";
			// create container for custom select
			var htmlSelect = "<div class='custom-select'>" +
								"<div class='custom-select__area'></div>" +
								"<div class='custom-select__down' style='display: none'></div>" +
							"</div>"
			;

			$(htmlSelect)
				.insertAfter(el)
			;

			// element custom select
			me.customSelectEl = $el.next("." + me.settings.className);

			// element area
			me.areaEl = me.customSelectEl.children("." + me.settings.area);
			// element down area
			me.downEl = me.customSelectEl.children("." + me.settings.down);

			// copy options to custom select
			$.each(me.optionEl, function(index) {
				var $this = $(this),
					text = $this.text()
				;

				if($this.is(":checked")) {
					me.areaEl.append( _getAreaElement(text, index) );
					me.downEl.append( $(_getDownElement(text, index)).addClass("selected") );
				} else {
					me.downEl.append($(_getDownElement(text, index)) );
				}
			});
		};

		// method for create area element
		function _getAreaElement(text, index) {

			return '<div class="custom-select__selected" data-index="' + index + '">' +
					'<i class="fa fa-times"></i>' + text +
				'</div>';
		};

		// method for create down element
		function _getDownElement(text, index) {

			return me.settings.multiple ?
				"<div class='" + me.settings.optionCls + "' data-index="+ index +">" +
					"<input type='checkbox' data-index=" + index + ">" +
					text +
				"</div>"
				: "<div class='" + me.settings.optionCls + "' data-index="+ index +">" + text + "</div>"
			;
		};

		// method for create placeholder
		function _getPlaceholder() {
			return '<div class="custom-select__placeholder">placeholder</div>';
		};


		// Обрабатываем собития клика по элементам
		// 1 если клик по area = открываем/закрываем select
		// click event
		var _click = function(e) {
			var $target = $(e.target);

			// if we click on top area
			// for show/hide down container toggle cls open
			if( $target.hasClass(me.settings.area) ) {
				_toggleSelectDown(e);
			}

			// if we click on custom option or
			// inside option checkbox
			if(e.target.type === "checkbox" || $target.hasClass(me.settings.optionCls) ){
				_changeEvent($target, e);
			}
		};

		var _toggleSelectDown = function(e) {
			me.customSelectEl.toggleClass("open");
		};

		// if click on custom option or checkbox
		var _changeEvent = function(element, e) {

			var $option = ( element.hasClass(me.settings.optionCls) )
					? element
					: element.parent("." + me.settings.optionCls)
			;

			var areaEl, flag;

			/**
			 * Check selected option
			 */
			if(!$option.hasClass("selected")) {
				flag = true;

				if(me.settings.multiple) {
					$option.addClass("selected");

					$option.find("[type='checkbox']")
						.prop("checked", true);

					if(me.customSelectEl.find(".custom-select__placeholder").length) {
						me.customSelectEl.find(".custom-select__placeholder").remove();
					}

					areaEl = _getAreaElement( $option.text(), $option.data("index"));

					me.areaEl.append(areaEl);

				} else {
					
					$option.addClass("selected")
						.siblings()
							.removeClass("selected")
					;

					$option.find("[type='checkbox']")
						.prop("checked", true);

					$option.siblings().find("[type='checkbox']")
						.prop("checked", false);

					areaEl = _getAreaElement( $option.text(), $option.data("index"));

					me.areaEl.empty().append(areaEl);
					me.downEl.children(me.settings.optionCls).removeClass("selected");

				}
			} else {
				flag = false;

				$option.removeClass("selected")
					.find("[type='checkbox']")
					.prop("checked", false)
				;

				me.areaEl.find("[data-index='" + $option.data("index") + "']").remove();
			}

			_updateRealSelect(flag, $option.data("index") );
		};

		var _updateRealSelect = function(flag, index) {

			if(flag) {
				$el.find("option:nth-child(" + ++index + ")").prop("selected", true);
			} else {
				if($el.find("option:selected").length - 1 ) {
					$el.find("option:nth-child(" + ++index + ")").prop("selected", false);
				} else {
					// set placeholder if no any selected option
					$el.prop("selectedIndex", -1);
					me.areaEl.empty().append( _getPlaceholder() );
				}
			}
		};


		// initialize
		_initialize();

		// returns the current jQuery object
		return this;
	}

})(jQuery);