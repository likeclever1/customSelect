/*
 * customSelect v1.0.0
 */

"use strict"

;(function(){
	var component;

	var defaults = {
		// GENERAL
		customEventName: 'customChange',
		customCls: "customSelect",
		customTopCls: "customSelect__top",
		customDownCls: "customSelect__down",
		customOptCls: "customSelect__option",
		customSelectedCls: "customSelect__selected",
		customPlaceholderCls : "customSelect__placeholder"
	};

	$.fn.customSelect = function( options ) {
		if(this.length == 0) return this;

		// support multiple elements
		if( this.length > 1 ) {
			this.each(function() {
				$(this).customSelect( options );
			});

			return this;
		}

		// create a name space to be througth the plugin
		var me = {};
		// set a reference to our select element
		var el = this.get(0),
			$el = this
		;

		/**
		 * ===================================================================================
		 * = PRIVATE FUNCTIONS
		 * ===================================================================================
		 */
		
		/**
		 * Initializes namespace settings to be used throughout plugin
		 */
		
		var _initialize = function() {
			// merge user-supplied options with defaults
			me.settings = $.extend({}, defaults, options);

			// option elements
			me.optionEl = $el.children("option");

			// render custom select
			_render();

			// add Events
			_eventHandler();
		};

		/**
		 * Performs all DOM and CSS modifications
		 */
		
		var _render = function() {
			// hide native select
			// el.style.display = "none";
			// create container for custom select
			var htmlSelect = "<div class='" + me.settings.customCls + "'>" +
								"<div class='" + me.settings.customTopCls + "'></div>" +
								"<div class='" + me.settings.customDownCls + "' style='display: none'></div>" +
							"</div>"
			;

			// insert tpl to Dom
			$(htmlSelect).insertAfter(el);

			// select custom select
			me.$customEl = $el.next("." + me.settings.customCls);
			// element area
			me.topEl = me.$customEl.children("." + me.settings.customTopCls);
			// element down area
			me.downEl = me.$customEl.children("." + me.settings.customDownCls);

			// copy options to custom select
			$.each(me.optionEl, function(index) {
				var $this = $(this),
					text = $this.text()
				;

				if($this.is(":checked")) {
					me.topEl.append( _getTopElement(text, index) );
					me.downEl.append( $(_getDownElement(text, index)).addClass("selected") );
				} else {
					me.downEl.append($(_getDownElement(text, index)) );
				}
			});
		};

		// method for create area element
		function _getTopElement(text, index) {

			return '<div class="' + me.settings.customSelectedCls + '" data-index="' + index + '">' + text + '</div>';
		};

		// method for create down element
		function _getDownElement(text, index) {

			return "<div class='" + me.settings.customOptCls + "' data-index="+ index +">" + text + "</div>"
			;
		};

		// method for create placeholder
		function _getPlaceholder() {
			return '<div class="'+ me.settings.customPlaceholderCls +'">placeholder</div>';
		};

		var _eventHandler = function() {
			
			me.$customEl.on("touchstart click", _eventClick);

			$(document).on("touchstart click", me.hideDown);
		};

		// click event
		var _eventClick = function(e) {
			var $target = $(e.target);

			// if we click on top
			// for show/hide down container toggle cls open
			if( $target.closest("." + me.settings.customTopCls).length ) {
				me.toggleDown();
			}

			// if we click on custom option or
			// inside option checkbox
			if($target.closest("." + me.settings.customOptCls).length ) {
				_customChangeEvent($target, e);
			}
		};

		// if click on custom option
		var _customChangeEvent = function($option, e) {

			/**
			 * Check selected option
			 */
			// if click on selected item
			if(!$option.hasClass("selected")) {
				// create custom event
				me.$customEl.trigger(me.settings.customEventName);

				$option.addClass("selected")
					.siblings()
						.removeClass("selected")
				;

				me.topEl
					.empty()
						.append( _getTopElement( $option.text(), $option.data("index")) )
				;

				$el.find("option").eq($option.data("index"))
					.prop("selected", true)
				;
			}

			me.toggleDown();
		};

		/**
		 * Public Method
		 */
		
		me.toggleDown = function() {
			me.$customEl.toggleClass("open");
		};

		me.hideDown = function(e) {

			if( !$(e.target).closest("." + me.settings.customCls).length )
				me.$customEl.removeClass("open");
		}

		// initialize
		_initialize();

		// returns the current jQuery object
		return this;
	}

})(jQuery);