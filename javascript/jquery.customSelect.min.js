/*
 * customSelect v1.0.0
 */

"use strict"

;(function(){
	var plugin;

	var defaults = {
		// GENERAL
		className: "custom-select"
		// CALLBACKS
	};

	$.fn.customSelect = function( options ) {
		if(this.length == 0) return this;

		// support multiple elements
		if(this.length > 1) {
			this.each(function() {
				$(this).customSelect( options );
			});

			return this;
		}

		// create a name space to be througth the plugin
		var me = {};
		// set a reference to our select element
		var el = this.get(0),
			$el = this
		;

		/**
		 * ===================================================================================
		 * = PRIVATE FUNCTIONS
		 * ===================================================================================
		 */
		
		/**
		 * Initializes namespace settings to be used throughout plugin
		 */
		
		var _initialize = function() {
			// merge user-supplied options with defaults
			me.settings = $.extend({}, defaults, options);
			// set className for custom select
			me.className = me.settings.className;
			// select all option
			me.options = $el.children("option");

			_createCustomSelect();

			_eventListeners();
		};

		/**
		 * Performs all DOM and CSS modifications
		 */
		
		var _createCustomSelect = function() {
			// hide native select
			el.style.display = "none";
			// create container for custom select
			var htmlSelect = "<div class='custom-select'>" +
								"<div class='custom-select__area'></div>" +
								"<div class='custom-select__down' style='display: none'></div>" +
							"</div>"
			;

			$(htmlSelect)
				.insertAfter(el)
			;
			// add options
			$.each(select.options, function(index) {
				var $this = $(this),
					text = $this.text(),
					item = "<div class='custom-select__option' data-index="+ index +">" + text + "</div>"
				;

				if($this.is(":checked")) {
					$(".custom-select__area").append(item);
				}

				$(".custom-select__down").append(item);

			});
		};

		var _eventListeners = function() {
			// click
			var _click = function(e) {
				$(".custom-select").toggleClass("open")

				var $target = $(e.target);
				
				if($target.is(".custom-select__down .custom-select__option") && !$target.hasClass("selected")) {
					$target.addClass("selected").siblings().removeClass("selected");
					var clone = $target.clone();

					$(".custom-select__area").empty().append(clone);
					$(".custom-select__area div").removeClass("selected");

					$el.prop("selectedIndex", $target.data("index"));

					console.log($el.children("option:selected").text());
				}
			};

			$(".custom-select").on("click", _click);
		};


		// initialize
		_initialize();

		// returns the current jQuery object
		return this
	}

})(jQuery);