/*
 * customSelect v1.0.0
 * http://wenzhixin.net.cn/p/multiple-select/docs/
 */

"use strict"

;(function(){
	var plugin;

	var defaults = {
		// GENERAL
		className: "custom-select",
		area: "custom-select__area",
		down: "custom-select__down"
		// CALLBACKS
	};

	$.fn.customSelect = function( options ) {
		if(this.length == 0) return this;

		// support multiple elements
		if(this.length > 1) {
			this.each(function() {
				$(this).customSelect( options );
			});

			return this;
		}

		// create a name space to be througth the plugin
		var me = {};
		// set a reference to our select element
		var el = this.get(0),
			$el = this
		;

		/**
		 * ===================================================================================
		 * = PRIVATE FUNCTIONS
		 * ===================================================================================
		 */
		
		/**
		 * Initializes namespace settings to be used throughout plugin
		 */
		
		var _initialize = function() {
			// merge user-supplied options with defaults
			me.settings = $.extend({}, defaults, options);

			//set class for custom select option
			me.settings.optionCls = "custom-select__option";

			// option elements
			me.optionEl = $el.children("option");

			_createCustomSelect();

			// add Events
			$(".custom-select").on("click", _click);
		};

		/**
		 * Performs all DOM and CSS modifications
		 */
		
		var _createCustomSelect = function() {
			// hide native select
			// el.style.display = "none";
			// create container for custom select
			var htmlSelect = "<div class='custom-select'>" +
								"<div class='custom-select__area'></div>" +
								"<div class='custom-select__down' style='display: none'></div>" +
							"</div>"
			;

			$(htmlSelect)
				.insertAfter(el)
			;

			// element custom select
			me.customSelectEl = $el.next("." + me.settings.className);

			// element area
			me.areaEl = me.customSelectEl.children("." + me.settings.area);
			// element down area
			me.downEl = me.customSelectEl.children("." + me.settings.down);

			// copy options to custom select
			$.each(me.optionEl, function(index) {
				var $this = $(this),
					text = $this.text()
				;

				if($this.is(":checked")) {
					me.areaEl.append( _getAreaElement(text, index) );
					me.downEl.append( $(_getDownElement(text, index)).addClass("selected") );
				} else {
					me.downEl.append($(_getDownElement(text, index)) );
				}
			});
		};

		// method for create area element
		var _getAreaElement = function(text, index) {

			return '<div class="custom-select__selected" data-index="' + index + '">' +
					'<i class="fa fa-times"></i>' + text +
				'</div>';
		};

		// method for create down element
		var _getDownElement = function(text, index) {
			return me.settings.multiple ?
				"<div class='" + me.settings.optionCls + "' data-index="+ index +">" +
					"<input type='checkbox' data-index=" + index + ">" +
					text +
				"</div>"
				: "<div class='" + me.settings.optionCls + "' data-index="+ index +">" + text + "</div>"
			;
		};

		// click event
		var _click = function(e) {
			var $target,
				areaEl
			;

			// for show/hide down container toggle cls open
			me.customSelectEl.toggleClass("open");

			$target = $(e.target);
			
			if($target.hasClass(me.settings.optionCls) && !$target.hasClass("selected")) {
				$target.addClass("selected")
					.siblings()
						.removeClass("selected")
				;

				areaEl = _getAreaElement( $target.text(), $target.data("index"));

				me.areaEl.empty().append(areaEl);
				me.downEl.children(me.settings.optionCls).removeClass("selected");

				_updateRealSelect( $target.data("index") );
			}
		};

		var _updateRealSelect = function(index) {
			$el.prop("selectedIndex", index);
		};


		// initialize
		_initialize();

		// returns the current jQuery object
		return this
	}

})(jQuery);